apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'
apply from: '../jacoco.gradle'
apply plugin: 'com.github.triplet.play'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]

    defaultConfig {
        applicationId globalConfiguration["androidApplicationId"]

        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file("yugibrick.keystore")
            storePassword System.getenv("KEY_STORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            proguardFiles fileTree('proguard').asList().toArray()

            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    /* Extension for kotlin Parcelization of objects */
    androidExtensions {
        experimental = true
    }

    lintOptions {
        lintConfig file("lint.xml")
        disable "IncompatibleIidVersion"
    }
}

dependencies {
    implementation project(':ui')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "androidx.appcompat:appcompat:$androidAppCompatVersion"
    implementation "androidx.core:core-ktx:$ktxVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "com.google.android:flexbox:$flexBoxVersion"
    implementation "com.google.android.material:material:$androidMaterialVersion"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipeRefreshVersion"

    /* tests */
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "androidx.arch.core:core-testing:$androidArchVersion"
    androidTestImplementation "androidx.test:runner:$androidTestRunnerVersion"

    /* multidex */
    implementation "androidx.multidex:multidex:$multidexVersion"

    /* koin */
    implementation "org.koin:koin-android:$koinVersion"
    implementation "org.koin:koin-androidx-scope:$koinVersion"
    implementation "org.koin:koin-androidx-viewmodel:$koinVersion"
    testImplementation "org.koin:koin-test:$koinVersion"

    /* rx */
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinVersion"

    /* fastadapter */
    implementation "com.mikepenz:fastadapter:$fastAdapterVersion"
    implementation "com.mikepenz:fastadapter-commons:$fastAdapterVersion"

    /* validation */
    implementation "com.tcorner:flexvalidation:$flexValidationVersion"

    /* firebase */
    implementation "com.google.firebase:firebase-core:$firebaseCoreVersion"
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion"
}

play {
    serviceAccountCredentials file("service-credentials.json")
}

/**
 * get value from local.properties
 *
 * @return value of the key
 */
def getLocalPropertiesValue(key) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty(key)
}